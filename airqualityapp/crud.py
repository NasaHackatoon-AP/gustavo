from sqlalchemy.orm import Session, joinedload
from datetime import datetime, timedelta
from fastapi import HTTPException, status
from passlib.context import CryptContext
import secrets, hashlib
from jose import JWTError, jwt
from .models import Usuario, PerfilSaude, AQIPersonalizadoHistorico, AlertasEnviados
from .utils import verify_password, hash_senha
from .mail_utils import enviar_alerta_email

# Configura√ß√µes
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
RESET_TOKEN_EXP_MINUTES = 60  # tempo de validade do token

# Configura√ß√µes JWT
SECRET_KEY = "segredo-super-seguro-aura-air"  # Em produ√ß√£o, use uma chave mais segura
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# -----------------------------
# Autentica√ß√£o JWT
# -----------------------------

def create_access_token(data: dict, expires_delta: timedelta = None):
    """Cria token JWT de acesso"""
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def get_current_user(db: Session, token: str):
    """Obt√©m usu√°rio atual baseado no token JWT"""
    print(f"üîç Token recebido: {token[:50]}...")
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        print(f"‚úÖ Token decodificado: {payload}")
        email = payload.get("sub")
        if email is None:
            print("‚ùå Email n√£o encontrado no token")
            raise HTTPException(status_code=401, detail="Token inv√°lido")
        
        usuario = db.query(Usuario).filter(Usuario.email == email).first()
        if not usuario:
            print(f"‚ùå Usu√°rio n√£o encontrado: {email}")
            raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
        print(f"‚úÖ Usu√°rio encontrado: {usuario.nome}")
        return usuario
    except JWTError as e:
        print(f"‚ùå Erro JWT: {e}")
        raise HTTPException(status_code=401, detail="Token inv√°lido")

def autenticar_usuario(db: Session, email: str, senha: str):
    """Autentica usu√°rio com email e senha"""
    usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if not usuario:
        return False
    if not verify_password(senha, usuario.senha_hash):
        return False
    return usuario

# -----------------------------
# Usu√°rios
# -----------------------------

def criar_usuario(db: Session, usuario):
    # Verificar se o email j√° existe
    usuario_existente = db.query(Usuario).filter(Usuario.email == usuario.email).first()
    if usuario_existente:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email j√° cadastrado"
        )

    db_usuario = Usuario(
        nome=usuario.nome,
        email=usuario.email,
        data_nascimento=usuario.data_nascimento,
        cidade=usuario.cidade,
        estado=usuario.estado,
        senha_hash=hash_senha(usuario.senha)
    )
    db.add(db_usuario)
    db.commit()
    db.refresh(db_usuario)
    return db_usuario

def login_usuario(db: Session, email: str, senha: str):
    """Autentica usu√°rio e retorna token JWT"""
    usuario = autenticar_usuario(db, email, senha)
    if not usuario:
        raise HTTPException(status_code=401, detail="Email ou senha inv√°lidos")
    
    # Criar token JWT
    access_token = create_access_token(data={"sub": usuario.email})
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "usuario": {
            "id": usuario.id,
            "nome": usuario.nome,
            "email": usuario.email,
            "cidade": usuario.cidade,
            "estado": usuario.estado
        }
    }

def deletar_usuario(db: Session, email: str, senha: str):
    """Deleta usu√°rio ap√≥s verificar credenciais"""
    usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if not usuario or not verify_password(senha, usuario.senha_hash):
        raise HTTPException(status_code=401, detail="Usu√°rio ou senha inv√°lidos")

    # Migrar hash legado para bcrypt automaticamente
    if usuario.senha_hash.startswith("HASH_"):
        usuario.senha_hash = hash_senha(senha)
        db.commit()

    # Deletar registros relacionados primeiro
    # Deletar perfil de sa√∫de
    db.query(PerfilSaude).filter(PerfilSaude.usuario_id == usuario.id).delete()
    # Deletar hist√≥rico AQI
    db.query(AQIPersonalizadoHistorico).filter(AQIPersonalizadoHistorico.usuario_id == usuario.id).delete()
    # Deletar alertas enviados
    db.query(AlertasEnviados).filter(AlertasEnviados.usuario_id == usuario.id).delete()
    
    # Agora pode deletar o usu√°rio
    db.delete(usuario)
    db.commit()
    return {"msg": "Conta deletada com sucesso!"}

# -----------------------------
# Perfil de sa√∫de
# -----------------------------

def criar_perfil_saude(db: Session, perfil):
    db_perfil = PerfilSaude(**perfil.dict())
    db.add(db_perfil)
    db.commit()
    db.refresh(db_perfil)
    return db_perfil

def obter_perfil_usuario(db: Session, usuario_id: int):
    return db.query(PerfilSaude)\
             .options(joinedload(PerfilSaude.usuario))\
             .filter(PerfilSaude.usuario_id == usuario_id)\
             .first()

# -----------------------------
# Hist√≥rico e alertas
# -----------------------------

def salvar_historico(db: Session, usuario_id: int, aqi_original: int, aqi_personalizado: int, nivel_alerta: str):
    registro = AQIPersonalizadoHistorico(
        usuario_id=usuario_id,
        aqi_original=aqi_original,
        aqi_personalizado=aqi_personalizado,
        nivel_alerta=nivel_alerta
    )
    db.add(registro)
    db.commit()
    db.refresh(registro)
    return registro

def registrar_alerta(db: Session, usuario_id: int, nivel_alerta: str, metodo: str):
    alerta = AlertasEnviados(
        usuario_id=usuario_id,
        nivel_alerta=nivel_alerta,
        metodo=metodo
    )
    db.add(alerta)
    db.commit()
    db.refresh(alerta)
    return alerta

# -----------------------------
# Forgot Password / Reset
# -----------------------------

def gerar_token_redefinicao(db: Session, email: str):
    """Gera token de redefini√ß√£o e envia por e-mail"""
    usuario = db.query(Usuario).filter(Usuario.email == email).first()
    if usuario:
        # Gerar token seguro
        token = secrets.token_urlsafe(48)
        token_hash = hashlib.sha256(token.encode()).hexdigest()
        
        # Salvar no banco
        usuario.reset_token_hash = token_hash
        usuario.reset_expires_at = datetime.utcnow() + timedelta(minutes=RESET_TOKEN_EXP_MINUTES)
        db.add(usuario)
        db.commit()

        # Preparar e-mail
        assunto = "üîê Redefini√ß√£o de senha - Aura Air"
        corpo = f"""
        Ol√° {usuario.nome},

        Recebemos uma solicita√ß√£o de redefini√ß√£o de senha para sua conta Aura Air.

        üîë Seu token de redefini√ß√£o: {token}

        ‚è∞ Este token expira em {RESET_TOKEN_EXP_MINUTES} minutos.

        Para redefinir sua senha, use este token no endpoint /reset-password.

        Se n√£o foi voc√™ quem solicitou, ignore este e-mail.

        ---
        Sistema Aura Air - Qualidade do Ar Personalizada
        """

        # Enviar e-mail
        try:
            resultado = enviar_alerta_email(usuario.email, assunto, corpo)
            if resultado:
                print(f"‚úÖ E-mail de reset enviado para: {usuario.email}")
            else:
                print(f"‚ö†Ô∏è E-mail salvo em fallback para: {usuario.email}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao enviar e-mail: {e}")
            # Continuar mesmo se e-mail falhar

    # Resposta gen√©rica para seguran√ßa
    return {"msg": "Se o e-mail existir no sistema, voc√™ receber√° instru√ß√µes para resetar a senha."}

def redefinir_senha(db: Session, token: str, nova_senha: str):
    token_hash = hashlib.sha256(token.encode()).hexdigest()
    agora = datetime.utcnow()

    usuario = db.query(Usuario).filter(
        Usuario.reset_token_hash == token_hash,
        Usuario.reset_expires_at != None,
        Usuario.reset_expires_at >= agora
    ).first()

    if not usuario:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Token inv√°lido ou expirado")

    # Atualizar senha com bcrypt
    usuario.senha_hash = pwd_context.hash(nova_senha)

    # Invalidar token
    usuario.reset_token_hash = None
    usuario.reset_expires_at = None

    db.add(usuario)
    db.commit()
    return {"msg": "Senha redefinida com sucesso!"}